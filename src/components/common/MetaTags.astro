---
import { SEO } from "astro-seo";
import { getAsset } from "../../utils/permalinks";
import CustomStyles from "../../components/CustomStyles.astro";
import type { MetaSEO } from "../../types";
import { getImageUrl, generateWebsiteSchema } from "../../utils/schema";
import { SITE } from "~/config.mjs";

/**
 * MetaTags Component Properties
 */
export interface MetaTagsProps extends MetaSEO {}

const {
  title = SITE.title,
  description = SITE.description,
  image = SITE.defaultImage,
  ogType = "website",
  canonicalURL,
  articlePublishTime,
  keywords = SITE.keywords,
  author = SITE.name, // Fallback to site name if author not specified
  language = SITE.language, // Use SITE.language instead of defaultLanguage
}: MetaTagsProps = Astro.props;

// Get image URL as string
const imageUrl = getImageUrl(image, SITE.origin);

// Format canonical URL
const ogCanonicalURL = canonicalURL ? new URL(canonicalURL, Astro.site) : new URL(Astro.url.pathname, Astro.site);

// Format publish date for articles
const articlePublishDate = articlePublishTime ? new Date(articlePublishTime).toISOString() : undefined;

// Business Schema - using your actual business info
const businessSchema = {
  "@context": "https://schema.org",
  "@type": "LocalBusiness",
  name: "The Kitchen Studio",
  "@id": "https://www.thekitchenstudio.gr",
  url: "https://www.thekitchenstudio.gr",
  image: getAsset("./assets/images/logo/the-kitchen-studio-logo.png"),
  address: {
    "@type": "PostalAddress",
    streetAddress: "Grigoriou Lampraki 28",
    addressLocality: "Glyfada",
    addressRegion: "Attica",
    postalCode: "16675",
    addressCountry: "GR",
  },
  geo: {
    "@type": "GeoCoordinates",
    latitude: 37.86350802540611,
    longitude: 23.754075789949074,
  },
  telephone: "+30 210 8981423",
  openingHoursSpecification: [
    {
      "@type": "OpeningHoursSpecification",
      dayOfWeek: ["Monday", "Wednesday", "Saturday"],
      opens: "10:00",
      closes: "14:00",
    },
    {
      "@type": "OpeningHoursSpecification",
      dayOfWeek: ["Tuesday", "Thursday", "Friday"],
      opens: "10:00",
      closes: "14:00",
    },
    {
      "@type": "OpeningHoursSpecification",
      dayOfWeek: ["Tuesday", "Thursday", "Friday"],
      opens: "17:30",
      closes: "20:30",
    },
  ],
};

// Website Schema
// Convert defaultImage to a string URL for compatibility
const siteConfig = {
  ...SITE,
  defaultImage: getImageUrl(SITE.defaultImage, SITE.origin),
};
const websiteSchema = generateWebsiteSchema(siteConfig);

// Define types for meta and link tags
interface MetaTag {
  name: string;
  content: string;
  media?: string;
}

interface LinkTag {
  rel: string;
  href: string;
  color?: string;
}

// Process keywords into a string if they're an array
const keywordsString = Array.isArray(keywords) ? keywords.join(", ") : keywords || "";

// Configure SEO props
const seoProps = {
  title: title,
  description: description,
  canonical: ogCanonicalURL.toString(),
  openGraph: {
    basic: {
      title: title,
      type: ogType,
      image: imageUrl || "",
      url: ogCanonicalURL.toString(),
    },
    optional: {
      locale: language || "el-GR",
      siteName: SITE.name,
      description: description,
    },
    article:
      ogType === "article"
        ? {
            publishedTime: articlePublishDate,
            authors: [author || SITE.name],
            tags: Array.isArray(keywords) ? keywords : keywords?.split(",").map((k) => k.trim()) || [],
          }
        : undefined,
  },
  twitter: {
    creator: "@thekitchenstudio",
    card: "summary_large_image",
    image: imageUrl || "",
    title: title,
    description: description,
  },
  extend: {
    meta: [
      { name: "viewport", content: "width=device-width, initial-scale=1.0" },
      { name: "msapplication-TileColor", content: "#000000" },
      { name: "generator", content: Astro.generator },
      { name: "format-detection", content: "telephone=no" },
      { name: "mobile-web-app-capable", content: "yes" },
      { name: "apple-mobile-web-app-title", content: SITE.name },
      { name: "application-name", content: SITE.name },
      ...(keywordsString ? [{ name: "keywords", content: keywordsString }] : []),
      ...(author ? [{ name: "author", content: author }] : []),
    ] as MetaTag[],
    link: [{ rel: "canonical", href: ogCanonicalURL.toString() }] as LinkTag[],
  },
} as const;

// Define the type for the asset paths
type AssetPath = string;
---

<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />

<SEO {...seoProps} />

<CustomStyles />

<link rel="shortcut icon" href={getAsset("/favicon.ico") as AssetPath} />
<link rel="icon" type="image/svg+xml" href={getAsset("/favicon.svg") as AssetPath} />
<link rel="mask-icon" href={getAsset("/favicon.svg") as AssetPath} color="#000000" />
<link rel="apple-touch-icon" href={getAsset("/apple-touch-icon.png") as AssetPath} />
<link rel="manifest" href={getAsset("/site.webmanifest") as AssetPath} />
<link rel="sitemap" href="/sitemap-index.xml" />

<!-- Add the structured data -->
<script type="application/ld+json" set:html={JSON.stringify(businessSchema)} />
<script type="application/ld+json" set:html={JSON.stringify(websiteSchema)} />

<!-- Allow for additional structured data from page templates -->
<slot />

<!-- Google tag (gtag.js) -->
<script is:inline type="text/partytown" src="https://www.googletagmanager.com/gtag/js?id=G-J18XYTZ2CK"></script>

<script is:inline type="text/partytown">
  window.dataLayer = window.dataLayer || [];
  function gtag() {
    dataLayer.push(arguments);
  }
  gtag("js", new Date());

  gtag("config", "G-J18XYTZ2CK");
</script>
